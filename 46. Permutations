/*
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
*/

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if(nums.length == 0 || nums == null){
            return result;
        }
        
        boolean[] isInBuffer = new boolean[nums.length];
        int[] buffer = new int[nums.length];
        
        findAllPermutations(nums, buffer, 0, isInBuffer, result);
        return result;
    }
    
    public void findAllPermutations(int[] nums, int[] buffer, int bufferIdx, boolean[] isInBuffer, List<List<Integer>> result){
        
        if(buffer.length == bufferIdx){
            printBuffer(buffer, result);
        }
        
        for(int i=0;i<nums.length; i++){
            if(!isInBuffer[i]){
                buffer[bufferIdx] = nums[i];
                isInBuffer[i] = true;
                findAllPermutations(nums, buffer, bufferIdx+1, isInBuffer, result);
                isInBuffer[i] = false;
            }
        }
    }
    
    public void printBuffer(int[] buffer, List<List<Integer>> result){
        List<Integer> temp = new ArrayList<>();
        for(int j=0;j<buffer.length;j++){
            temp.add(buffer[j]);
        }
        result.add(temp);
    }
}
