/*
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1] */

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        
        HashMap<Integer, Integer> map = new HashMap<>();
        int[] result = new int[k];
        
        for(int i=0;i<nums.length;i++){
            map.put(nums[i], map.getOrDefault(nums[i],0)+1);
        }
                             
     Queue<Integer> pq = new PriorityQueue<Integer> ((a, b) -> 
         map.get(a) - map.get(b)) ;   //stores smallest to largets 
                             
       for(int key: map.keySet()){
           pq.add(key);
           
           if(pq.size() > k){
               pq.poll();
           }
       }
        
        for(int i=0;i<k;i++){  // can print from right to left
            result[i] = pq.poll();
        }
        
        return result;
    }
}
