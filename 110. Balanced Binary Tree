/* Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.  */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }   
            return checkHeight(root) != -1;
}

    
    public int checkHeight(TreeNode root){
        if(root == null){
            return 0; // we dont care about exact height , we care about its balanced or not
        }
        
        int leftH = checkHeight(root.left);
        int rightH = checkHeight(root.right);
        
        if(leftH == -1 || rightH == -1){
            return -1;
        }
        
        if(Math.abs(leftH - rightH) > 1){
            return -1;
        }
        
        return 1 + Math.max(leftH, rightH);
    }
}
