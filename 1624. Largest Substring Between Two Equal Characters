/* Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.


Example 1:

Input: s = "aa"
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.
Example 2:

Input: s = "abca"
Output: 2
Explanation: The optimal substring here is "bc".
Example 3:

Input: s = "cbzxy"
Output: -1
Explanation: There are no characters that appear twice in s.
Example 4:

Input: s = "cabbac"
Output: 4
Explanation: The optimal substring here is "abba". Other non-optimal substrings include "bb" and "".  */

class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
       
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int result =-1;
        for(int i=0;i<s.length();i++){
            if(map.containsKey(s.charAt(i))){
                int j = map.get(s.charAt(i));
                int diff = i-j-1;
                
                if(result < diff){
                    result = diff;
                }
            }
            else{
                 map.put(s.charAt(i), i);

            }            
        }
       return result; 
    }
}
