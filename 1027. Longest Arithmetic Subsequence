/*
Given an array A of integers, return the length of the longest arithmetic subsequence in A.

Recall that a subsequence of A is a list A[i_1], A[i_2], ..., A[i_k] with 0 <= i_1 < i_2 < ... < i_k <= A.length - 1, and that a sequence B is arithmetic if B[i+1] - B[i] are all the same value (for 0 <= i < B.length - 1).

 

Example 1:

Input: A = [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.
Example 2:

Input: A = [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].
Example 3:

Input: A = [20,1,15,3,10,5,8]
Output: 4
Explanation: 
The longest arithmetic subsequence is [20,15,10,5].  */

class Solution {
    public int longestArithSeqLength(int[] A) {
        
        int size = A.length;
        HashMap<Integer, Integer>[] map = new HashMap[size];        
        int maxVal = 1;
        for(int i=0;i<A.length;i++){
            int currElement = A[i];
             map[i] = new HashMap<>();
            HashMap<Integer, Integer> currMap = map[i];
            for(int j=0;j<i;j++){                
                int diff = currElement - A[j];                
                HashMap<Integer, Integer> prevMap = map[j];
                int val = prevMap.getOrDefault(diff, 0)+1;
                currMap.put(diff, val);
                map[i] = currMap;
                
                maxVal = Math.max(maxVal, currMap.get(diff));               
            }
        }
        
        return maxVal+1;
    }
}
