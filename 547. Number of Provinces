/*
There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces. */

class Solution {
    public int findCircleNum(int[][] isConnected) {
        int R = isConnected.length;
        int C = isConnected[0].length;
        int count =0;
        int[] visited = new int[R];
        for(int row = 0; row<R; row++){
                if(visited[row] == 0){
                    dfs(isConnected, row, visited);
                    count++;
                }
            }
    
        return count;
    }
    
    
    public void dfs(int[][] isConnected, int r, int[] visited){
        for(int i=0;i<isConnected.length;i++){
            if(isConnected[r][i] == 1 && visited[i] == 0){
                visited[i] = 1;
                 dfs(isConnected, i, visited);

            }
            
        }
    }
}
