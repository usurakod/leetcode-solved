/* There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:



Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
 

Constraints:

1 <= n <= 10^5
n-1 <= connections.length <= 10^5
connections[i][0] != connections[i][1]
There are no repeated connections. */

class Solution {
    
    ArrayList<Integer>[] graph;
    List<List<Integer>> criticalConnections;
    int[] visitedTimes;
    int[] lowTimes;
    int time;
    
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
       
        criticalConnections = new ArrayList<>();
        graph = new ArrayList[n];
        visitedTimes = new int[n];
        lowTimes = new int[n];
        time =0;
        
        
        getGraph(connections);
        boolean[] visited = new boolean[n];
        dfs(visited, 0, -1);
        
        return criticalConnections;
    }
    
    public void dfs(boolean[] visited, int currNode, int parent){
        visited[currNode] = true;
        visitedTimes[currNode] = lowTimes[currNode] = time++;
        
        for(int neighbor: graph[currNode]){
            if(neighbor == parent) continue;
            if(!visited[neighbor]){
                dfs(visited, neighbor, currNode);
                lowTimes[currNode] =Math.min(lowTimes[neighbor],lowTimes[currNode]);
                
                if(lowTimes[neighbor] > visitedTimes[currNode]){
                    criticalConnections.add(Arrays.asList(currNode,neighbor));
                }
            }            
            else{
              lowTimes[currNode] = Math.min(lowTimes[neighbor], lowTimes[currNode]);  
            }
        }
    }
    
    
    //build the adjacency list
    public void getGraph(List<List<Integer>> connections){
        for(int i=0;i<graph.length;i++){
            graph[i] = new ArrayList<>();
        }
        
        for(List<Integer> connection: connections){
            int a = connection.get(0);
            int b = connection.get(1);
            
            graph[a].add(b);
            graph[b].add(a);
        }
    }
}
