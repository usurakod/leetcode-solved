/*
Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3. */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        if(root == null){
            return list;
        }
        
        findPaths(root, new Stack<Integer>(), list); 
        return list;
    }
    
    
    public void findPaths(TreeNode current, Stack<Integer> path, List<String> list){
        if(current == null){
            return;
        }        
        path.add(current.val);
        
        if(current.left == null && current.right == null){            
            printList(path,list);
        }
        
        findPaths(current.left, path, list);
        findPaths(current.right, path, list);
        path.pop();
    }
    
    public void printList(Stack<Integer> path, List<String> list){
        Stack<Integer> stack = new Stack<>();
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<path.size()-1;i++){
            
            sb.append(path.get(i).toString());
            sb.append("->");
        }
        sb.append(path.get(path.size()-1).toString());
        list.add(sb.toString());
    }
}
